class Student:
    def __init__(self, name: str, courses=None):
        if courses is None:
            courses = {}
        self.name = name
        self.courses = courses  # {course_name: [notes]}

    def enroll(self, course_name: str, notes, add_course_notes: str = ""):
        if course_name in self.courses.keys():
            [self.courses[course_name].append(x) for x in notes]
            return "Course already added. Notes have been updated."

        if add_course_notes == "Y" or add_course_notes == "":
            self.courses[course_name] = notes
            return "Course and course notes have been added."

        self.courses[course_name] = []
        return "Course has been added."

    def add_notes(self, course_name, notes):
        if course_name in self.courses.keys():
            self.courses[course_name].append(notes)
            return "Notes have been updated"
        raise Exception("Cannot add notes. Course not found.")

    def leave_course(self, course_name):
        if course_name in self.courses.keys():
            self.courses.pop(course_name)
            return "Course has been removed"
        raise Exception("Cannot remove course. Course not found.")
_________________

from unittest import TestCase, main
from project.student import Student

class StudentTest(TestCase):
    def setUp(self) -> None:
        self.student = Student("lusy")
        self.student_two = Student("liq", {"OOP": ["belejki"]})

    def test_initiation_no_notes(self):
        self.assertEqual(self.student.name, "lusy")
        self.assertEqual(self.student.courses, {})

    def test_initiation_with_notes(self):
        course = {"OOP": ["belejki"]}
        self.assertEqual(self.student_two.name, "liq")
        self.assertEqual(self.student_two.courses, course)

    def test_enroll_method_add_notes(self):
        self.student.courses = {'advanced': ["123"]}
        result = self.student.enroll('advanced', "4", "")
        self.assertEqual(self.student.courses, {"advanced": ["123","4"]})
        self.assertEqual(result, "Course already added. Notes have been updated.")

    def test_enroll_with_create_new_course(self):
        result = self.student.enroll("advanced", ["123"], "Y")
        self.assertEqual(self.student.courses, {"advanced": ["123"]})
        self.assertEqual(result, "Course and course notes have been added.")

    def test_enroll_with_create_new_course_with_empty(self):
        result = self.student.enroll("advanced", ["123"], "")
        self.assertEqual(self.student.courses, {"advanced": ["123"]})
        self.assertEqual(result, "Course and course notes have been added.")

    def test_enroll_with_create_new_course_with_empty_list(self):
        result = self.student.enroll("OOP", ["123"], "77")
        self.assertEqual(self.student.courses, {"OOP": []})
        self.assertEqual(result, "Course has been added.")

    def test_add_notes_when_course_exists(self):
        self.student.courses = {'advanced': ["123"]}
        result = self.student.add_notes("advanced", ["456"])
        self.assertEqual(result, "Notes have been updated")

    def test_add_notes_when_course_dont_exists(self):
        with self.assertRaises(Exception) as ex:
            self.student.add_notes("OOP", ["123"])
        self.assertEqual("Cannot add notes. Course not found.", str(ex.exception))

    def test_leave_method_invalid_input(self):
        with self.assertRaises(Exception) as ex:
            self.student.leave_course("OOP")
        self.assertEqual("Cannot remove course. Course not found.", str(ex.exception))

    def test_leave_method_valid_input(self):
        self.student.courses = {"OOP": ["123"]}
        result = self.student.leave_course("OOP")
        self.assertEqual(result, "Course has been removed")
if __name__ == '__main__':
    main()
