class Car:
    def __init__(self, make, model, fuel_consumption, fuel_capacity):
        self.make = make
        self.model = model
        self.fuel_consumption = fuel_consumption
        self.fuel_capacity = fuel_capacity
        self.fuel_amount = 0
    
    @property
    def make(self):
        return self.__make
    
    @make.setter
    def make(self, new_value):
        if not new_value:
            raise Exception("Make cannot be null or empty!")
        self.__make = new_value

    @property
    def model(self):
        return self.__model
    
    @model.setter
    def model(self, new_value):
        if not new_value:
            raise Exception("Model cannot be null or empty!")
        self.__model = new_value

    @property
    def fuel_consumption(self):
        return self.__fuel_consumption
    
    @fuel_consumption.setter
    def fuel_consumption(self, new_value):
        if new_value <= 0:
            raise Exception("Fuel consumption cannot be zero or negative!")
        self.__fuel_consumption = new_value

    @property
    def fuel_capacity(self):
        return self.__fuel_capacity
    
    @fuel_capacity.setter
    def fuel_capacity(self, new_value):
        if new_value <= 0:
            raise Exception("Fuel capacity cannot be zero or negative!")
        self.__fuel_capacity = new_value

    @property
    def fuel_amount(self):
        return self.__fuel_amount
    
    @fuel_amount.setter
    def fuel_amount(self, new_value):
        if new_value < 0:
            raise Exception("Fuel amount cannot be negative!")
        self.__fuel_amount = new_value

    def refuel(self, fuel):
        if fuel <= 0:
            raise Exception("Fuel amount cannot be zero or negative!")
        self.__fuel_amount += fuel
        if self.__fuel_amount > self.__fuel_capacity:
            self.__fuel_amount = self.__fuel_capacity

    def drive(self, distance):
        needed = (distance / 100) * self.__fuel_consumption

        if needed > self.__fuel_amount:
            raise Exception("You don't have enough fuel to drive!")

        self.__fuel_amount -= needed



________________________________________________________________________________
#testing the upper file

om project.car_manager import Car
from unittest import TestCase, main

class CarTest(TestCase):
    def setUp(self) -> None:
        self.car = Car("audi", "a6", 5, 100)

    def test_correct_init(self):
        self.assertEqual(self.car.make, "audi")
        self.assertEqual(self.car.model, "a6")
        self.assertEqual(self.car.fuel_consumption, 5)
        self.assertEqual(self.car.fuel_capacity, 100)
        self.assertEqual(self.car.fuel_amount, 0)

    def test_if_make_setter_works_incorrect_input(self):
        with self.assertRaises(Exception) as ex:
           self.car.make = ""
        self.assertEqual("Make cannot be null or empty!", str(ex.exception))
    #
    # def test_setter_correct_input(self):
    #     self.car.make = "bmw"
    #     self.assertEqual(self.car.make, "bmw")

    def test_if_model_setter_works_incorrect_input(self):
        with self.assertRaises(Exception) as ex:
            self.car.model = ""
        self.assertEqual("Model cannot be null or empty!", str(ex.exception))

    def test_with_negative_fuel(self):
        with self.assertRaises(Exception) as ex:
            self.car.fuel_consumption = 0

        self.assertEqual("Fuel consumption cannot be zero or negative!", str(ex.exception))

    def test_with_negative_fuel_amount(self):
        with self.assertRaises(Exception) as ex:
            self.car.fuel_amount += -5

        self.assertEqual("Fuel amount cannot be negative!", str(ex.exception))

    def test_negative_fuel_capacity(self):
        with self.assertRaises(Exception) as ex:
            self.car.fuel_capacity = 0

        self.assertEqual("Fuel capacity cannot be zero or negative!", str(ex.exception))

    def test_refuel_negative(self):
        with self.assertRaises(Exception) as ex:
            self.car.refuel(-5)
        self.assertEqual("Fuel amount cannot be zero or negative!", str(ex.exception))

    def test_refuel_with_correct_input_less_than_capacity(self):
        self.car.refuel(50)
        self.assertEqual(50, self.car.fuel_amount)

    def test_refuel_with_more_than_capacity(self):
        self.car.refuel(200)
        self.assertEqual(self.car.fuel_capacity, self.car.fuel_amount)

    def test_drive_more_than_possible(self):
        with self.assertRaises(Exception) as ex:
            self.car.drive(1000)
        self.assertEqual("You don't have enough fuel to drive!", str(ex.exception))

    def test_drive_distance(self):
        self.car.fuel_amount = 50
        self.car.drive(20)
        self.assertEqual(self.car.fuel_amount, 49)


if __name__ == "__main__":
    main()
